---
title: "Infográficos do Observatório"
subtitle: "Construção e publicação dos Infográficos"
author: '<img src="https://www.gov.br/servidor/pt-br/resolveuid/eeb73983ae9e476d92605559ccafbf66" width="60%">'
format: 
  revealjs:
    theme: serif
incremental: false
embed-resources: true
knitr:
  opts_chunk: 
    message: false
    warning: false
    echo: true
---

# Tópicos

-   Processo de Análises (ETL -\> Análises -\> Relatórios -\> Automatização -\> Observatório

-   Possibilidades de Análises e construção de Relatórios

-   Criação de Infográficos

-   Publicação e Automatização (GITHUB)

-   Observatório (Plone)

## O que é RMarkdown?

-   O R Markdown é um pacote para criação de ***relatórios automatizados*** utilizando as linguagens de programação R, Python e de marcação Markdown.

> Linguagens de marcação utilizam marcadores (símbolos, tags, funções) para formatar um arquivo de texto simples. Os exemplos mais famosos de linguagem de marcação são o HTML e LaTeX.

Referência do quarto: <https://quarto.org/docs/websites>.

## O que podemos fazer com essa ferramenta?

-   Possibilita automatizar a criar produtos com o R e Python, através do pacote Reticulate @reticulate que integra o R com Python. Com ele também é possível fazer a conexão com o SAS através da biblioteca SASPY

<https://www.youtube.com/watch?v=A2-Ti-c6w8c&feature=youtu.be> <https://rstudio.github.io/reticulate/index.html> <https://bookdown.org/yihui/rmarkdown-cookbook/eng-python.html>

## 

-   Com exceção das interpretações e conclusões, só precisamos montá-lo uma vez. A partir daí, com apenas um clique podemos:

    -   replicar o relatório para diversas versões da base de dados (modificações, correções, processos periódicos);

    -   replicar o relatório para diversas variáveis.

    -   Criar documentos reprodutíveis

    -   Criar diversos tipos de produtos

## Exemplos de integraçao R e Python

```{r, setup}
library(reticulate)
```

Crie uma variável x na sessão do Python

```{python}
x = [1, 2, 3]
```

Acesse a variável Python `x` em um pedaço de código R:

```{r}
py$x
```

## 

Crie uma nova variável `y` na sessão Python usando R, e passe um quadro de dados para `y`:

```{r}
py$y <- head(cars)
```

Imprima a variável `y` em Python:

```{python}
print(y)
```

## Algumas aplicações

```{r}
#| echo: false
exemplos_rmd <- tibble::tibble(pacote = as.character(),
               desc = as.character(),
               exemplos = as.character()) |>
  
 
  
  tibble::add_row(pacote = "[distill](https://rstudio.github.io/distill/)",
                  desc = "Blogs e sites",
                  exemplos = "- [RStudio AI Blog](https://blogs.rstudio.com/ai/)") |>
  
  tibble::add_row(pacote = "[bookdown](https://bookdown.org/)",
                  desc = "Livros",
                  exemplos = "- [Livro Ciência de Dados em R](https://livro.curso-r.com/) <br> - [R for Data Science](https://r4ds.had.co.nz/)") |>
  
  tibble::add_row(pacote = "[xaringan](https://github.com/yihui/xaringan)",
                  desc = "Apresentações",
                  exemplos = "- Essa apresentação  <br> - [Build Your Own Universe - Garrick Aden-Buie & Travis Gerke](https://www.garrickadenbuie.com/talk/build-your-own-universe/)") |>
  
  tibble::add_row(pacote = "[pagedown](https://github.com/rstudio/pagedown)",
                  desc = "Currículos, cartas e trabalhos acadêmicos",
                  exemplos = "- [Relatório do Observatório da Insolvência](https://abjur.github.io/obsFase2/relatorio/obs_recuperacoes_abj.pdf) ") |>
  
    tibble::add_row(pacote = "[flexdashboard](https://rmarkdown.rstudio.com/flexdashboard/)",
                  desc = "Dashboards",
                  exemplos = "- [Tesouro Nacional](https://painelgfs.tesouro.gov.br/)") |>
  
  
  tibble::add_row(pacote = "[learnr](https://rstudio.github.io/learnr/)",
                  desc = "Tutoriais interativos",
                  exemplos = "- [Text mining with tidy data principles](https://juliasilge.shinyapps.io/learntidytext/) <br> - [Teacups, Giraffes,  & Statistics](https://tinystats.github.io/teacups-giraffes-and-statistics/)") |>
  
  tibble::add_row(pacote = "[rticles](https://github.com/rstudio/rticles)",
                  desc = "Artigos científicos",
                  exemplos = "   ") |> 
  tibble::add_row(pacote = " ",
                  desc = "Outros exemplos",
                  exemplos = "[Newsletter Garimpo](https://nucleo.jor.br/newsletters/garimpo)") 
  


exemplos_rmd |>
  dplyr::slice(1:3) |> 
  knitr::kable(col.names = c("Pacote", "O que podemos fazer?", "Exemplos"))
```

## 

```{r}
#| echo: false
exemplos_rmd |>
  dplyr::slice(4:6) |> 
  knitr::kable(col.names = c("Pacote", "O que podemos fazer?", "Exemplos"))
```

## 

```{r}
#| echo: false
exemplos_rmd |>
  dplyr::slice(7:8) |> 
  knitr::kable(col.names = c("Pacote", "O que podemos fazer?", "Exemplos"))
```

## Estrutura dos relatórios

Todo arquivo RMarkdown/Quarto terá a seguinte estrutura:

-   Um preâmbulo com configurações

``` yaml
---
title: "Relatório maravilhoso"
output: html_document
---
```

-   Blocos de texto (marcados em Markdown)

``` md
Texto em __RMarkdown/Quarto__!
```

## 

-   Blocos de código (em R ou outra linguagem)

```` md
```{r}`r ''`
print("ola, codigo R")
```
````

> Dependendo do formato de saída, o documento pode precisar ser dividido em vários arquivos ou precisar de arquivos adicionais.

## Sintaxe Markdown

Utilizamos Markdown para marcar os textos do relatório.

Principais marcadores utilizados para formatar texto:

-   uma palavra entre asteriscos fica em itálico: `*texto*` é transformado em *texto*

-    .uma palavra entre dois asteríscos fica em negrito: `**texto**` é transformado em **texto**

-   um ou mais hashtags viram títulos: `# Título muito grande`, `## Título grande`, `### Título médio`, `#### Título pequeno`, `##### Título muito pequeno`

-   hiperlinks podem ser criados com a estrutura `[texto](link)`:

## 

-   `[link para o site da Curso-R](https://curso-r.com)` é transformado em [link para o site da Curso-R](https://curso-r.com).

-   para deixar o texto com `esse formato` (formato de código), apenas coloque o texto entre duas crases.

Material de consulta: [Livro: Ciência de Dados em R - Seção sobre Markdown](https://livro.curso-r.com/9-1-markdown.html)

## Visual Editor

-   As versões mais recentes do RStudio permitem usar o Visual Editor.

Leitura indicada:

-   <https://docs.posit.co/ide/user/ide/guide/documents/visual-editor.html>

```{r}
#| echo: false
#| out.width: 90%
#| fig.align: center
#| fig.cap: 'Fonte: Posit'
knitr::include_graphics("https://docs.posit.co/ide/user/ide/guide/documents/images/visual-editing.png")

```

## Chunks - Campos de código

-   Em um arquivo `.qmd` ou `.Rmd`, precisamos escrever nossos códigos dentro dos *chunks*. Para inserir um chunk, utilize o atalho `CTRL + ALT + I`.

-   É possível adicionar campos de código utilizando a seguinte sintaxe:

```` md
```{r}`r ''`
codigo em R aqui
```
````

## Inline + Formatação

```{r}
#| echo: true
especies <- palmerpenguins::penguins |> 
  dplyr::pull(species) |> 
  unique() |>
  knitr::combine_words(and = " e ", oxford_comma = FALSE)

pi_bonitinho <- round(pi, 2)
pi_reais <- scales::dollar(pi, prefix = "R$ ", decimal.mark = ",", big.mark = ".")
```

A base dos pinguins tem `r nrow(palmerpenguins::penguins)` linhas. Os pinguins estudados na base são `r especies`. O Pi é mais ou menos `r pi_bonitinho` e isso é Pi reais: `r pi_reais`.

## Personalizar templates

styles.css

Material de consulta: [Livro: Ciência de Dados em R - Seção sobre R Markdown](https://livro.curso-r.com/9-2-r-markdown.html)

## YAML

-   Os arquivos `.qmd` ou `.Rmd` começam com códigos em yaml/yml.

-   Esse "bloco" de código é delimitado por `---`.

-   Apresenta metadados e parâmetros utilizados para gerar o documento final.

```{yml}
---
title: "Relatórios automáticos"
subtitle: "Observatório de Pessoal"
author: "CGINF"
date: "Março de 2021"
output: xaringan::moon_reader
---
```

## Render!

-   Para gerarmos o relatório na extensão desejada, precisamos *renderizá-lo*, isto é, transformar o arquivo `.qmd` ou `.Rmd` em um PDF, HTML ou Word.

-   Isso pode ser feito no RStudio a partir dos botões `Knit` (.Rmd) ou `Render` (.qmd), que fica logo acima do script, ou pelo atalho `CTRL + SHIFT + K`.

## O que acabamos de fazer

```{r}
#| out-width: 60%
#| fig-cap: "Fontr: Blog do Yihui Xie"
#| echo: false
#| fig-align: center
knitr::include_graphics("https://bookdown.org/yihui/rmarkdown-cookbook/images/workflow.png")
```

```{r}
#| out-width: 60%
#| fig-cap: "Fonte: quarto.org"
#| echo: false
#| fig-align: center
knitr::include_graphics("https://quarto.org/docs/get-started/hello/images/rstudio-qmd-how-it-works.png")
```

## Principais saídas

```{r}
#| echo: false
#| out.width: 45%
#| fig-cap: "Ilustração por Allison Horst"
knitr::include_graphics("https://alison.netlify.app/rmd-valentine/images/rmarkdown_hedgehog_wide.png")
```

## Relatórios (.Rmd)

### HTML

```{yml}
output: html_document
```

### Word (.docx)

```{yml}
output: word_document
```

## Relatórios (.qmd)

### HTML

```{yml}
format: html
```

### Word (.docx)

```{yml}
format: docx
```

## Relatórios (.Rmd)

### PDF (com $\TeX$)

```{yml}
output: pdf_document
```

Caso não tenha o $\TeX$:

```{r}
#| eval: false
#| include: true
tinytex::install_tinytex()
```

## Relatórios (.qmd)

### PDF (com $\TeX$)

```{yml}
format: pdf
```

Caso não tenha o $\TeX$:

```{r}
#| eval: false
#| include: true
tinytex::install_tinytex()
```

## Relatórios

### PDF com o pacote Pagedown

```{yml}
output: html_document
knit: pagedown::chrome_print
```

Ou utilize a função `pagedown::chrome_print()` em um relatório em HTML:

```{r}
#| eval: false
#| include: true
pagedown::chrome_print("relatorio.html")
```

Obs: Por enquanto não existe uma alternativa Quarto a isso.

## Apresentações (.Rmd)

-   **Powerpoint**

```{yml}
output: powerpoint_presentation
```

-   **HTML**

```{yml}
output: xaringan::moon_reader
```

## Apresentações (.qmd)

-   **Powerpoint**

```{yml}
format: pptx
```

-   **HTML**

```{yml}
format: revealjs
```

## Resumo

-   Podemos escrever arquivos com código, resultados, textos, imagens, etc.

-   O mesmo conteúdo pode ser disponibilizado em diferentes tipos de saída.

-   Nos metadados (`yaml`) do arquivo `.Rmd` ou `.qmd`, definimos a saída no parâmetro `output`.

-   Mais saídas e comparação completa:

    -   [RMarkdown](https://rmarkdown.rstudio.com/formats.html)
    -   [Quarto](https://quarto.org/docs/faq/rmarkdown.html)

## Infográficos Utilzando o Python

<https://plotly.com/python/getting-started/#plotly-charts-in-dash>

```{python}

import plotly.express as px
fig = px.bar(x=["a", "b", "c"], y=[1, 3, 2])
fig
```

## Infográficos Utilzando o Python

<https://plotly.com/r/getting-started/>

```{r}
library(plotly)
fig <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
fig

```

# Inspiração para os gráficos

-   <https://chart-studio.plotly.com/feed/#/>

-   <https://www.htmlwidgets.org/>

\-<https://docs.bokeh.org/en/latest/docs/gallery.html>

-   <https://www.cedricscherer.com/2019/12/30/best-tidytuesday-2019/>

\-<https://twitter.com/search?q=%23TidyTuesday&src=saved_search_click>

# Outras possibilidades de Infográficos

Podemos encontrar infográficos construídos com ggplot2 e personalizarmos para nossa análise

Exemplo:

<https://github.com/z3tt/TidyTuesday/tree/main/plots>

## 

```{r echo=FALSE, out.width="50%", eval = TRUE, fig.align='center'}
knitr::include_graphics("https://raw.githubusercontent.com/Z3tt/TidyTuesday/main/plots/2021_22/2021_22_MarioKart.png")
```

## Compartilhando os resultados

Para o caso do Observatório, a saída será um HTML e talvez um PDF.

No HTML, vamos publicar em um link e embedar no Observatório com GITHUB Pages e/ou Netlify Drop

## Disponibilizar na internet

> DICA IMPORTANTE: Busque nomear seus arquivos como `index.html`

## Disponibilizar utilizando o Netlify Drop

-   <https://app.netlify.com/drop>

-   Gratuito

-   Para quem não usa GitHub.

-   Podemos subir uma pasta com todo o conteúdo dentro.

-   Mais fácil, mas não dá pra ficar atualizando o material depois de um jeito fácil.

## Disponibilizar utilizando o GitHub

-   Gratuito!

-   Três passos:

    1.  Configurar o Git e o GitHub com o RStudio - 1 vez por usuário do computador.

    2.  Vincular o projeto a um repositório no GitHub - 1 vez por projeto.

    3.  Ativar o GitHub Pages - 1 vez por projeto.

## Disponibilizar utilizando o GitHub

-   

    1)  Precisa ter o Git e GitHub configurado com o seu RStudio (esse vídeo é útil: <https://youtu.be/fiZStofJqMQ?t=2415> )

-   

    2)  O projeto precisa estar vinculado a um repositório no GitHub:

```{r eval=FALSE, include=TRUE}
# é necessário rodar apenas uma vez
usethis::use_git()
usethis::use_github()
```

-   

    3)  Ativar o GitHub Pages

```{r eval=FALSE, include=TRUE}
usethis::use_github_pages(
  branch = usethis::git_default_branch(), # branch principal
  path = "/" # ou /docs 
)
```

-   O endereço do site será `https://seu-username.github.io/nome-repositorio/caminho-do-arquivo.html`

## Links já publicados no Observatório

Com o Github pages

-   <https://cginf.github.io/Etnia_genero/>
-   <https://cginf.github.io/Servidores_por_Genero/>
-   <https://cginf.github.io/Taxa_de_reposicao-1/>
-   <https://cginf.github.io/Servidores_Ativos/>

## Com Netliy

-   <https://telainiciofuncao.netlify.app>
-   <https://grafico-pcd.netlify.app>
-   <https://cargos-generos.netlify.app>
-   <https://percentual-cargos.netlify.app>
-   <https://grafico-etnia.netlify.app>

# Vamos ao R

![](https://media.tenor.com/E7QxmVz22ugAAAAd/estudar-computador.gif)
